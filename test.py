#!/usr/bin/env python3

import struct

m1_raw = b"\x00\x37\x2a\x00\x00\x00\x01\x04\x00\x10\x4a\x00\x01\x10\x10\x22" \
b"\x00\x01\x04\x10\x47\x00\x10\x38\x83\x30\x92\x30\x92\x18\x83\x9c" \
b"\x77\x1c\x61\xb4\x34\xbe\xc4\x10\x20\x00\x06\x1c\x61\xb4\x34\xbe" \
b"\x8e\x10\x1a\x00\x10\x25\x39\x83\x86\xcd\x55\x69\x4e\x09\xdc\x0f" \
b"\x7b\x05\x8e\x65\xdf\x10\x32\x00\xc0\xbb\x2d\x5c\xf8\x62\x48\xb2" \
b"\x14\xec\xac\x2f\x8e\xa2\x35\x6d\x4d\x55\xf9\x65\xb3\xd2\xd7\xb7" \
b"\x5f\xaf\x2d\xe2\xd3\xe3\x93\x85\x80\x3e\x3b\x8c\xd6\x47\xe2\x79" \
b"\x63\x46\xd1\xe0\xae\xa8\xa4\x33\x27\xed\xe3\x58\x37\x5a\xca\xa0" \
b"\x4b\x7a\xca\x9c\x72\xc1\xa2\x53\xc7\x8c\x49\x25\x36\xdb\xbd\x7f" \
b"\xe6\x33\xe4\x4f\x33\x3b\xbe\xdf\xd5\x99\xba\x44\x44\xcb\xb5\xde" \
b"\xfd\xd2\x3b\x85\xdd\xc9\xde\xc1\x94\xf7\xa3\xe8\x28\x78\xe3\xc4" \
b"\x69\xd0\x1a\x56\xf6\x61\xe6\x7e\x44\xf4\x84\x14\x0b\xee\xc7\x37" \
b"\x46\x10\x9c\x91\x1c\xf9\x5d\x6c\xc0\xcc\x84\x9e\x21\x6d\xf2\xb4" \
b"\xf2\x8e\xaa\x97\xdd\x48\x37\xb0\x98\x75\xbe\xca\xc1\x7f\xf3\xb8" \
b"\x2f\xe7\x9f\xd5\xbc\x77\x21\x5f\x17\x84\x36\x44\x02\x85\x6a\x7e" \
b"\xb0\xb3\x11\x3e\xd1\x49\xe6\x2b\x23\x64\xdd\x7a\x4b\x91\x2a\x4a" \
b"\xf8\xc0\x6c\xf6\x60\x7f\x9c\x35\x6b\x10\x04\x00\x02\x00\x21\x10" \
b"\x10\x00\x02\x00\x09\x10\x0d\x00\x01\x01\x10\x08\x00\x02\x21\x0c" \
b"\x10\x44\x00\x01\x02\x10\x21\x00\x07\x54\x50\x2d\x4c\x69\x6e\x6b" \
b"\x10\x23\x00\x09\x54\x4c\x2d\x57\x52\x38\x34\x31\x4e\x10\x24\x00" \
b"\x04\x31\x34\x2e\x30\x10\x42\x00\x03\x31\x2e\x30\x10\x54\x00\x08" \
b"\x00\x06\x00\x50\xf2\x04\x00\x01\x10\x11\x00\x1b\x57\x69\x72\x65" \
b"\x6c\x65\x73\x73\x20\x4e\x20\x52\x6f\x75\x74\x65\x72\x20\x54\x4c" \
b"\x2d\x57\x52\x38\x34\x31\x4e\x10\x3c\x00\x01\x01\x10\x02\x00\x02" \
b"\x00\x00\x10\x12\x00\x02\x00\x00\x10\x09\x00\x02\x00\x00\x10\x2d" \
b"\x00\x04\x80\x00\x00\x00\x10\x49\x00\x06\x00\x37\x2a\x00\x01\x20"

def find_tlv(data, tag):
    tag_raw = struct.pack(">H", tag)
    index = data.find(tag_raw)

    if index == -1:
        return None
    length = struct.unpack(">H", data[index+2:index+4])[0]
    return data[index+4:index+4+length]

def parse_tlv(data):
	tlv_dict = {}
	offset = 9
	while offset + 4 <= len(data):  # Минимум 4 байта (Type + Length)
		tlv_type, tlv_length = struct.unpack(">HH", data[offset:offset+4])  # Читаем 4 байта (Type, Length)
		offset += 4
		tlv_value = data[offset:offset+tlv_length]  # Берём Value
		offset += tlv_length

		# Если тег уже встречался — делаем список
		if tlv_type in tlv_dict:
			if isinstance(tlv_dict[tlv_type], list):
				tlv_dict[tlv_type].append(tlv_value)
			else:
				tlv_dict[tlv_type] = [tlv_dict[tlv_type], tlv_value]
		else:
			tlv_dict[tlv_type] = tlv_value

	return tlv_dict

tlv_parsed = parse_tlv(m1_raw)
for tag, value in tlv_parsed.items():
	print(f"Tag: {hex(tag)}, Value: {value.hex() if isinstance(value, bytes) else [v.hex() for v in value]}")