#!/usr/bin/env python3

import os
import time
from scapy.all import *
import signal
import threading

wps_networks = {}
interface = "radio0mon"
channels = range(1, 14)  # –î–∏–∞–ø–∞–∑–æ–Ω –∫–∞–Ω–∞–ª–æ–≤ Wi-Fi 2.4 –ì–ì—Ü
stop_event = threading.Event()
interrupted = False

def handle_sigint(signum, frame):
	print("\nINTERRUPT signal detected")
	interrupted = True
	stop_event.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

signal.signal(signal.SIGINT, handle_sigint)

def channel_hopper():
    while not stop_event.is_set():
        for ch in channels:
            if stop_event.is_set():
                break
            #print(f"–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {ch}...")
            os.system(f"iwconfig {interface} channel {ch}")
            time.sleep(2)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–ø–ø–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
hopper_thread = threading.Thread(target=channel_hopper, daemon=True)
hopper_thread.start()

def parse_wps_version(wps_ie):
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç WPS IE –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é WPS.
    """
    i = 4  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ (WPS OUI: 00:50:F2:04)
    wps_version = None
    wps_2_0_possible = False  # –§–ª–∞–≥ –¥–ª—è –≤–µ—Ä—Å–∏–∏ WPS 2.0
    while i < len(wps_ie):
        if len(wps_ie) < i + 4:
            break
        field_type = int.from_bytes(wps_ie[i:i+2], "big")  # –¢–∏–ø –∞—Ç—Ä–∏–±—É—Ç–∞
        field_length = int.from_bytes(wps_ie[i+2:i+4], "big")  # –î–ª–∏–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è

        if field_type == 0x104A and field_length == 1:  # WPS Version (0x104A), –¥–ª–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ 1 –±–∞–π—Ç
            wps_version = wps_ie[i+4]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –±–∞–π—Ç –≤–µ—Ä—Å–∏–∏
        elif field_type == 0x103C and field_length == 1:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ 0x103C –¥–ª—è WPS 2.0
            wps_2_0_possible = True
        i += 4 + field_length

    if wps_version is None:  # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None

    # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ WPS 2.0, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
    if wps_2_0_possible:
        return "2.0"

    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ WPS 1.0
    return f"{wps_version >> 4}.{wps_version & 0xF}" if wps_version != 0x10 else "1.0"

def is_wps_disabled(pkt):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ WPS –≤ –ø–∞–∫–µ—Ç–µ.
    –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –ø–æ–ª—è WPS IE –∏–ª–∏ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –æ—à–∏–±–∫–∏ –≤ –æ–±–º–µ–Ω–µ.
    """
    if pkt.haslayer(Dot11Elt):
        elt = pkt.getlayer(Dot11Elt)
        while elt:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WPS IE (221) –∏ –µ–≥–æ –ø–æ–ª—è (OUI: 00:50:F2:04)
            if elt.ID == 221 and elt.info[:4] == b"\x00\x50\xF2\x04":
                return False  # WPS –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            elt = elt.payload if isinstance(elt.payload, Dot11Elt) else None
    return True  # –ï—Å–ª–∏ WPS IE –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ WPS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

def wps_packet_handler(pkt):
    debug_pkt = pkt
    if pkt.haslayer(Dot11):
        ssid = pkt[Dot11Elt].info.decode(errors="ignore") if pkt.haslayer(Dot11Elt) else None
        if not ssid or ssid.strip() == "":  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Å–µ—Ç–∏
            return

        bssid = pkt[Dot11].addr2
        signal = pkt.dBm_AntSignal if hasattr(pkt, 'dBm_AntSignal') else "N/A"

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–Ω–∞–ª
        channel = None
        if pkt.haslayer(Dot11Elt):
            elt = pkt.getlayer(Dot11Elt)
            while elt:
                if elt.ID == 3:  # –ö–∞–Ω–∞–ª
                    channel = ord(elt.info)
                    break
                elt = elt.payload if isinstance(elt.payload, Dot11Elt) else None

        if channel is None:
            return

        # –ò—â–µ–º WPS IE –≤ –ø–∞–∫–µ—Ç–µ
        wps_ie = None
        elt = pkt.getlayer(Dot11Elt)
        while elt:
            if elt.ID == 221 and elt.info[:4] == b"\x00\x50\xF2\x04":  # WPS IE
                wps_ie = elt.info
                break
            elt = elt.payload if isinstance(elt.payload, Dot11Elt) else None

        if wps_ie:            
            wps_version = parse_wps_version(wps_ie)
            if wps_version is None:
                return  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é

            wps_status = "Yes" if is_wps_disabled(pkt) else "No"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–µ—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            if not bssid in wps_networks:
                wps_networks[bssid] = (ssid, signal, channel, wps_version, wps_status)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                channel_width = 2
                wps_status_width = 2

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º str.center() –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
                print(f"üì° {bssid} | üì∂ {signal} dBm | {str(channel).center(channel_width)} | {wps_version} | {str(wps_status).center(wps_status_width)} | {ssid}")

print("üîç –°–∫–∞–Ω–∏—Ä—É–µ–º WiFi —Å–µ—Ç–∏ —Å WPS... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)\n")
print(" BSSID                RSSI         CH   WPS    Lck     ESSID")
print("----------------------------------------------------------------")

def start_sniffing():
	while not stop_event.is_set():
		if not interrupted:
			sniff(iface=interface, prn=wps_packet_handler, store=0, timeout=1, filter="subtype beacon")

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
sniffer_thread = threading.Thread(target=start_sniffing, daemon=True)
sniffer_thread.start()

while not stop_event.is_set():
    time.sleep(0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º stop_event —á–∞—â–µ

# –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫–∏
hopper_thread.join()
sniffer_thread.join()

print("Terminated")
